/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatefitness"]("main",{

/***/ "./src/modules/sendForm.js":
/*!*********************************!*\
  !*** ./src/modules/sendForm.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar sendForm = function sendForm(idform) {\n  var errorMessage = 'Что-то пошло не так...',\n      loadMessage = 'Загрузка...',\n      successMessage = 'Спасибо! Мы скоро свяжемся с вами!',\n      policyMessage = 'Согласитесь на обработку персональных данных',\n      form = document.getElementById(idform),\n      thanksPopup = document.getElementById('thanks'),\n      policyCheckbox = form.querySelector('input[type=\"checkbox\"]'),\n      inputName = form.querySelector('input[type=\"text\"]'),\n      inputPhone = form.querySelector('input[type=\"tel\"]'),\n      radioBtn = _toConsumableArray(form.querySelectorAll('input[type=radio]'));\n\n  var statusMessage = document.createElement('div');\n  statusMessage.style.cssText = 'font-size: 16px';\n  statusMessage.style.color = 'red';\n  statusMessage.style.margin = '5px 0 0 0';\n\n  var deleteMessage = function deleteMessage() {\n    setTimeout(function () {\n      statusMessage.textContent = '';\n    }, 5000);\n  };\n\n  if (policyCheckbox) {\n    policyCheckbox.removeAttribute('required');\n    inputName.removeAttribute('required');\n    inputPhone.removeAttribute('required');\n  }\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    if (inputName && (inputPhone.value == '' || inputName.value == '')) {\n      form.appendChild(statusMessage);\n      statusMessage.textContent = 'Необходимо заполнить все поля!';\n      deleteMessage();\n      return;\n    } else if (policyCheckbox && !policyCheckbox.checked) {\n      form.appendChild(statusMessage);\n      statusMessage.textContent = policyMessage;\n      deleteMessage();\n    } else {\n      setData(event, form);\n      clearInput(form);\n      setTimeout(function () {\n        thanksPopup.style.display = 'none';\n      }, 5000);\n    }\n  });\n\n  var clearInput = function clearInput() {\n    var inputs = _toConsumableArray(form.querySelectorAll('input'));\n\n    inputs.forEach(function (key) {\n      key.value = '';\n    });\n\n    if (policyCheckbox) {\n      policyCheckbox.checked = false;\n    }\n\n    statusMessage.textContent = '';\n  };\n\n  thanksPopup.addEventListener('click', function (event) {\n    if (event.target.matches('.overlay') || event.target.matches('[class *= close]')) {\n      thanksPopup.style.display = 'none';\n    }\n  });\n\n  var thanks = function thanks(message) {\n    thanksPopup.querySelector('p').textContent = message;\n    thanksPopup.style.display = 'block';\n  };\n\n  form.addEventListener('change', function () {\n    if (radioBtn[0].checked) {\n      radioBtn[1].checked = false;\n    } else {\n      radioBtn[0].checked = false;\n      radioBtn[1].checked = true;\n    }\n  });\n\n  var setData = function setData(event, form) {\n    event.preventDefault();\n    form.appendChild(statusMessage);\n    statusMessage.textContent = loadMessage;\n    var formData = new FormData(form);\n    var body = {};\n    formData.forEach(function (val, key) {\n      body[key] = val;\n    });\n\n    var postData = function postData(body) {\n      return fetch('./server.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n    };\n\n    postData(body).then(function (response) {\n      if (response.status !== 200) {\n        throw new Error('status network not 200');\n      }\n\n      thanks(successMessage);\n    })[\"catch\"](function (error) {\n      thanks(errorMessage);\n      console.log(error);\n    });\n  };\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sendForm);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/modules/sendForm.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ 	"use strict";
/******/ 
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	(() => {
/******/ 		__webpack_require__.h = () => "7aabf775dfa38182d607"
/******/ 	})();
/******/ 	
/******/ }
);