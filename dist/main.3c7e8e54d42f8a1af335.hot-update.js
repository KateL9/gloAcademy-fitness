/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatefitness"]("main",{

/***/ "./src/modules/sendForm.js":
/*!*********************************!*\
  !*** ./src/modules/sendForm.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar sendForm = function sendForm(idform) {\n  var errorMessage = 'Что-то пошло не так...',\n      loadMessage = 'Загрузка...',\n      successMessage = 'Спасибо! Мы скоро свяжемся с вами!',\n      policyMessage = 'Согласитесь на обработку персональных данных',\n      form = document.getElementById(idform),\n      thanksPopup = document.getElementById('thanks'),\n      policyCheckbox = form.querySelector('input[type=\"checkbox\"]'),\n      inputName = form.querySelector('input[type=\"text\"]'),\n      inputPhone = form.querySelector('input[type=\"tel\"]'),\n      radioBtn = _toConsumableArray(form.querySelectorAll('input[type=radio]'));\n\n  var statusMessage = document.createElement('div');\n  statusMessage.style.cssText = 'font-size: 16px';\n  statusMessage.style.color = 'red';\n  statusMessage.style.margin = '5px 0 0 0';\n\n  var deleteMessage = function deleteMessage() {\n    setTimeout(function () {\n      statusMessage.textContent = '';\n    }, 5000);\n  };\n\n  if (policyCheckbox) {\n    policyCheckbox.removeAttribute('required');\n    inputName.removeAttribute('required');\n    inputPhone.removeAttribute('required');\n  }\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    if ((inputPhone.value == '' || inputName.value == '') && inputName) {\n      form.appendChild(statusMessage);\n      statusMessage.textContent = 'Необходимо заполнить все поля!';\n      deleteMessage();\n      return;\n    }\n\n    if (policyCheckbox && !policyCheckbox.checked) {\n      form.appendChild(statusMessage);\n      statusMessage.textContent = policyMessage;\n      deleteMessage();\n    } else {\n      setData(event, form);\n      setTimeout(function () {\n        thanksPopup.style.display = 'none';\n      }, 5000);\n      clearInput(form);\n    }\n  });\n\n  var clearInput = function clearInput() {\n    var inputs = _toConsumableArray(form.querySelectorAll('input'));\n\n    inputs.forEach(function (key) {\n      key.value = '';\n    });\n\n    if (policyCheckbox) {\n      policyCheckbox.checked = false;\n    }\n\n    statusMessage.textContent = '';\n  };\n\n  thanksPopup.addEventListener('click', function (event) {\n    if (event.target.matches('.overlay') || event.target.matches('[class *= close]')) {\n      thanksPopup.style.display = 'none';\n    }\n  });\n\n  var thanks = function thanks(message) {\n    thanksPopup.querySelector('p').textContent = message;\n    thanksPopup.style.display = 'block';\n  };\n\n  form.addEventListener('change', function () {\n    if (radioBtn[0] || radioBtn[1]) {\n      if (radioBtn[0].checked) {\n        radioBtn[1].checked = false;\n      } else {\n        radioBtn[0].checked = false;\n        radioBtn[1].checked = true;\n      }\n    }\n  });\n\n  var setData = function setData(event, form) {\n    event.preventDefault();\n    form.appendChild(statusMessage);\n    statusMessage.textContent = loadMessage;\n    var formData = new FormData(form);\n    var body = {};\n    formData.forEach(function (val, key) {\n      body[key] = val;\n    });\n\n    var postData = function postData(body) {\n      return fetch('./server.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n    };\n\n    postData(body).then(function (response) {\n      if (response.status !== 200) {\n        throw new Error('status network not 200');\n      }\n\n      thanks(successMessage);\n    })[\"catch\"](function (error) {\n      thanks(errorMessage);\n      console.log(error);\n    });\n  };\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sendForm);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRuZXNzLy4vc3JjL21vZHVsZXMvc2VuZEZvcm0uanM/YzAxNSJdLCJuYW1lcyI6WyJzZW5kRm9ybSIsImlkZm9ybSIsImVycm9yTWVzc2FnZSIsImxvYWRNZXNzYWdlIiwic3VjY2Vzc01lc3NhZ2UiLCJwb2xpY3lNZXNzYWdlIiwiZm9ybSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ0aGFua3NQb3B1cCIsInBvbGljeUNoZWNrYm94IiwicXVlcnlTZWxlY3RvciIsImlucHV0TmFtZSIsImlucHV0UGhvbmUiLCJyYWRpb0J0biIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzdGF0dXNNZXNzYWdlIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwiY3NzVGV4dCIsImNvbG9yIiwibWFyZ2luIiwiZGVsZXRlTWVzc2FnZSIsInNldFRpbWVvdXQiLCJ0ZXh0Q29udGVudCIsInJlbW92ZUF0dHJpYnV0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwidmFsdWUiLCJhcHBlbmRDaGlsZCIsImNoZWNrZWQiLCJzZXREYXRhIiwiZGlzcGxheSIsImNsZWFySW5wdXQiLCJpbnB1dHMiLCJmb3JFYWNoIiwia2V5IiwidGFyZ2V0IiwibWF0Y2hlcyIsInRoYW5rcyIsIm1lc3NhZ2UiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiYm9keSIsInZhbCIsInBvc3REYXRhIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiSlNPTiIsInN0cmluZ2lmeSIsInRoZW4iLCJyZXNwb25zZSIsInN0YXR1cyIsIkVycm9yIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBTUEsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQ0MsTUFBRCxFQUFZO0FBQ3pCLE1BQU1DLFlBQVksR0FBRyx3QkFBckI7QUFBQSxNQUNJQyxXQUFXLEdBQUcsYUFEbEI7QUFBQSxNQUVJQyxj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UUFBTXVDLFFBQVEsR0FBRyxJQUFJQyxRQUFKLENBQWFyQyxJQUFiLENBQWpCO0FBQ0EsUUFBSXNDLElBQUksR0FBRyxFQUFYO0FBRUFGLFlBQVEsQ0FBQ04sT0FBVCxDQUFpQixVQUFDUyxHQUFELEVBQU1SLEdBQU4sRUFBYztBQUMzQk8sVUFBSSxDQUFDUCxHQUFELENBQUosR0FBWVEsR0FBWjtBQUNILEtBRkQ7O0FBR0EsUUFBTUMsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQ0YsSUFBRCxFQUFVO0FBQ3ZCLGFBQU9HLEtBQUssQ0FBQyxjQUFELEVBQWlCO0FBQ3pCQyxjQUFNLEVBQUUsTUFEaUI7QUFFekJDLGVBQU8sRUFBRTtBQUNMLDBCQUFnQjtBQURYLFNBRmdCO0FBS3pCTCxZQUFJLEVBQUVNLElBQUksQ0FBQ0MsU0FBTCxDQUFlUCxJQUFmO0FBTG1CLE9BQWpCLENBQVo7QUFPSCxLQVJEOztBQVVBRSxZQUFRLENBQUNGLElBQUQsQ0FBUixDQUNLUSxJQURMLENBQ1UsVUFBQ0MsUUFBRCxFQUFjO0FBQ2hCLFVBQUlBLFFBQVEsQ0FBQ0MsTUFBVCxLQUFvQixHQUF4QixFQUE2QjtBQUN6QixjQUFNLElBQUlDLEtBQUosQ0FBVSx3QkFBVixDQUFOO0FBQ0g7O0FBQ0RmLFlBQU0sQ0FBQ3BDLGNBQUQsQ0FBTjtBQUNILEtBTkwsV0FPVyxVQUFDb0QsS0FBRCxFQUFXO0FBQ2RoQixZQUFNLENBQUN0QyxZQUFELENBQU47QUFDQXVELGFBQU8sQ0FBQ0MsR0FBUixDQUFZRixLQUFaO0FBQ0gsS0FWTDtBQVdILEdBL0JEO0FBZ0NILENBbEhEOztBQW9IQSxpRUFBZXhELFFBQWYiLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9zZW5kRm9ybS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNlbmRGb3JtID0gKGlkZm9ybSkgPT4ge1xyXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gJ9Cn0YLQvi3RgtC+INC/0L7RiNC70L4g0L3QtSDRgtCw0LouLi4nLFxyXG4gICAgICAgIGxvYWRNZXNzYWdlID0gJ9CX0LDQs9GA0YPQt9C60LAuLi4nLFxyXG4gICAgICAgIHN1Y2Nlc3NNZXNzYWdlID0gJ9Ch0L/QsNGB0LjQsdC+ISDQnNGLINGB0LrQvtGA0L4g0YHQstGP0LbQtdC80YHRjyDRgSDQstCw0LzQuCEnLFxyXG4gICAgICAgIHBvbGljeU1lc3NhZ2UgPSAn0KHQvtCz0LvQsNGB0LjRgtC10YHRjCDQvdCwINC+0LHRgNCw0LHQvtGC0LrRgyDQv9C10YDRgdC+0L3QsNC70YzQvdGL0YUg0LTQsNC90L3Ri9GFJyxcclxuICAgICAgICBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRmb3JtKSxcclxuICAgICAgICB0aGFua3NQb3B1cCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aGFua3MnKSxcclxuICAgICAgICBwb2xpY3lDaGVja2JveCA9IGZvcm0ucXVlcnlTZWxlY3RvcignaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyksXHJcbiAgICAgICAgaW5wdXROYW1lID0gZm9ybS5xdWVyeVNlbGVjdG9yKCdpbnB1dFt0eXBlPVwidGV4dFwiXScpLFxyXG4gICAgICAgIGlucHV0UGhvbmUgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3R5cGU9XCJ0ZWxcIl0nKSxcclxuICAgICAgICByYWRpb0J0biA9IFsuLi5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9cmFkaW9dJyldO1xyXG5cclxuICAgIGNvbnN0IHN0YXR1c01lc3NhZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIHN0YXR1c01lc3NhZ2Uuc3R5bGUuY3NzVGV4dCA9ICdmb250LXNpemU6IDE2cHgnO1xyXG4gICAgc3RhdHVzTWVzc2FnZS5zdHlsZS5jb2xvciA9ICdyZWQnO1xyXG4gICAgc3RhdHVzTWVzc2FnZS5zdHlsZS5tYXJnaW4gPSAnNXB4IDAgMCAwJztcclxuICAgIGNvbnN0IGRlbGV0ZU1lc3NhZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHN0YXR1c01lc3NhZ2UudGV4dENvbnRlbnQgPSAnJztcclxuICAgICAgICB9LCA1MDAwKTtcclxuICAgIH07XHJcbiAgICBpZiAocG9saWN5Q2hlY2tib3gpIHtcclxuICAgICAgICBwb2xpY3lDaGVja2JveC5yZW1vdmVBdHRyaWJ1dGUoJ3JlcXVpcmVkJyk7XHJcbiAgICAgICAgaW5wdXROYW1lLnJlbW92ZUF0dHJpYnV0ZSgncmVxdWlyZWQnKTtcclxuICAgICAgICBpbnB1dFBob25lLnJlbW92ZUF0dHJpYnV0ZSgncmVxdWlyZWQnKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBpZiAoKGlucHV0UGhvbmUudmFsdWUgPT0gJycgfHwgaW5wdXROYW1lLnZhbHVlID09ICcnKSAmJiBpbnB1dE5hbWUpIHtcclxuICAgICAgICAgICAgZm9ybS5hcHBlbmRDaGlsZChzdGF0dXNNZXNzYWdlKTtcclxuICAgICAgICAgICAgc3RhdHVzTWVzc2FnZS50ZXh0Q29udGVudCA9ICfQndC10L7QsdGF0L7QtNC40LzQviDQt9Cw0L/QvtC70L3QuNGC0Ywg0LLRgdC1INC/0L7Qu9GPISc7XHJcbiAgICAgICAgICAgIGRlbGV0ZU1lc3NhZ2UoKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwb2xpY3lDaGVja2JveCAmJiAhcG9saWN5Q2hlY2tib3guY2hlY2tlZCkge1xyXG4gICAgICAgICAgICBmb3JtLmFwcGVuZENoaWxkKHN0YXR1c01lc3NhZ2UpO1xyXG4gICAgICAgICAgICBzdGF0dXNNZXNzYWdlLnRleHRDb250ZW50ID0gcG9saWN5TWVzc2FnZTtcclxuICAgICAgICAgICAgZGVsZXRlTWVzc2FnZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNldERhdGEoZXZlbnQsIGZvcm0pO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoYW5rc1BvcHVwLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH0sIDUwMDApO1xyXG4gICAgICAgICAgICBjbGVhcklucHV0KGZvcm0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGNsZWFySW5wdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGlucHV0cyA9IFsuLi5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JyldO1xyXG4gICAgICAgIGlucHV0cy5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAga2V5LnZhbHVlID0gJyc7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHBvbGljeUNoZWNrYm94KSB7XHJcbiAgICAgICAgICAgIHBvbGljeUNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdHVzTWVzc2FnZS50ZXh0Q29udGVudCA9ICcnO1xyXG4gICAgfVxyXG4gICAgdGhhbmtzUG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0Lm1hdGNoZXMoJy5vdmVybGF5JykgfHwgZXZlbnQudGFyZ2V0Lm1hdGNoZXMoJ1tjbGFzcyAqPSBjbG9zZV0nKSkge1xyXG4gICAgICAgICAgICB0aGFua3NQb3B1cC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IHRoYW5rcyA9IChtZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgdGhhbmtzUG9wdXAucXVlcnlTZWxlY3RvcigncCcpLnRleHRDb250ZW50ID0gbWVzc2FnZTtcclxuICAgICAgICB0aGFua3NQb3B1cC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgIH07XHJcbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgICBpZiAocmFkaW9CdG5bMF0gfHwgcmFkaW9CdG5bMV0pIHtcclxuICAgICAgICAgICAgaWYgKHJhZGlvQnRuWzBdLmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIHJhZGlvQnRuWzFdLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJhZGlvQnRuWzBdLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJhZGlvQnRuWzFdLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIGNvbnN0IHNldERhdGEgPSAoZXZlbnQsIGZvcm0pID0+IHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGZvcm0uYXBwZW5kQ2hpbGQoc3RhdHVzTWVzc2FnZSk7XHJcbiAgICAgICAgc3RhdHVzTWVzc2FnZS50ZXh0Q29udGVudCA9IGxvYWRNZXNzYWdlO1xyXG4gICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0pO1xyXG4gICAgICAgIGxldCBib2R5ID0ge307XHJcblxyXG4gICAgICAgIGZvcm1EYXRhLmZvckVhY2goKHZhbCwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGJvZHlba2V5XSA9IHZhbDtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBwb3N0RGF0YSA9IChib2R5KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBmZXRjaCgnLi9zZXJ2ZXIucGhwJywge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHBvc3REYXRhKGJvZHkpXHJcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdGF0dXMgbmV0d29yayBub3QgMjAwJylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoYW5rcyhzdWNjZXNzTWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoYW5rcyhlcnJvck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHNlbmRGb3JtOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/modules/sendForm.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ 	"use strict";
/******/ 
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	(() => {
/******/ 		__webpack_require__.h = () => "004ceb12cb08fb8387c7"
/******/ 	})();
/******/ 	
/******/ }
);