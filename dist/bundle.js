(()=>{"use strict";eval("\n;// CONCATENATED MODULE: ./src/modules/selectClub.js\nvar selectClub = function selectClub() {\n  var clubDropdown = document.querySelector('.clubs-list>ul');\n  var expanded = false;\n  document.addEventListener('click', function (event) {\n    if (event.target.closest('.club-select')) {\n      if (!expanded) {\n        expanded = true;\n        clubDropdown.style.display = 'block';\n      } else {\n        expanded = false;\n        clubDropdown.style.display = 'none';\n      }\n    } else {\n      expanded = false;\n      clubDropdown.style.display = 'none';\n    }\n  });\n};\n\n/* harmony default export */ const modules_selectClub = (selectClub);\n;// CONCATENATED MODULE: ./src/modules/mainSlider.js\nvar mainSlider = function mainSlider() {\n  var slider = document.querySelector('.main-slider'),\n      allSlides = slider.querySelectorAll('.slide');\n  var count = 0;\n\n  var slide = function slide() {\n    allSlides[count].style.display = 'none';\n    count++;\n\n    if (count >= allSlides.length) {\n      count = 0;\n    }\n\n    allSlides[count].style.display = 'flex';\n  };\n\n  var start = function start() {\n    var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2000;\n    setInterval(slide, time);\n  };\n\n  start(2000);\n};\n\n/* harmony default export */ const modules_mainSlider = (mainSlider);\n;// CONCATENATED MODULE: ./src/modules/formPopups.js\nvar formPopups = function formPopups() {\n  var appointmentForm = document.querySelector('div#free_visit_form'),\n      callbackForm = document.querySelector('div#callback_form'),\n      giftForm = document.querySelector('#gift'),\n      phone = document.querySelector('#callback_footer_form-phone');\n  document.body.addEventListener('click', function (event) {\n    if (event.target.matches('.open-popup')) {\n      appointmentForm.style.display = 'block';\n    } else if (event.target.matches('.callback-btn')) {\n      if (!event.target.closest('#footer_form')) {\n        callbackForm.style.display = 'block';\n      }\n    } else if (event.target.closest('.fixed-gift')) {\n      event.target.style.display = 'none';\n      giftForm.style.display = 'block';\n    } else if (event.target.matches('.overlay') || event.target.matches('[class *= close]')) {\n      var popups = document.querySelectorAll('.popup');\n      popups.forEach(function (item) {\n        item.style.display = 'none';\n      });\n    }\n  });\n};\n\n/* harmony default export */ const modules_formPopups = (formPopups);\n;// CONCATENATED MODULE: ./src/modules/maskPhone.js\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar maskPhone = function maskPhone() {\n  var masked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"+7 (___) ___-__-__\";\n  var elems = document.querySelectorAll('input[type=\"tel\"]');\n\n  function mask(event) {\n    var keyCode = event.keyCode;\n    var template = masked,\n        def = template.replace(/\\D/g, \"\"),\n        val = this.value.replace(/\\D/g, \"\");\n    var i = 0,\n        newValue = template.replace(/[_\\d]/g, function (a) {\n      return i < val.length ? val.charAt(i++) || def.charAt(i) : a;\n    });\n    i = newValue.indexOf(\"_\");\n\n    if (i !== -1) {\n      newValue = newValue.slice(0, i);\n    }\n\n    var reg = template.substr(0, this.value.length).replace(/_+/g, function (a) {\n      return \"\\\\d{1,\" + a.length + \"}\";\n    }).replace(/[+()]/g, \"\\\\$&\");\n    reg = new RegExp(\"^\" + reg + \"$\");\n\n    if (!reg.test(this.value) || this.value.length < 6 || keyCode > 47 && keyCode < 58) {\n      this.value = newValue;\n    }\n\n    if (event.type === \"blur\" && this.value.length < 6) {\n      this.value = \"\";\n    }\n  }\n\n  var _iterator = _createForOfIteratorHelper(elems),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var elem = _step.value;\n      elem.addEventListener(\"input\", mask);\n      elem.addEventListener(\"focus\", mask);\n      elem.addEventListener(\"blur\", mask);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n\n/* harmony default export */ const modules_maskPhone = (maskPhone);\n;// CONCATENATED MODULE: ./src/modules/isValid.js\nvar isValid = function isValid() {\n  var regExpText = /^[а-яА-Я]+$/;\n  document.body.addEventListener('focusout', function (event) {\n    var target = event.target;\n\n    if (target.name == 'name' && target.placeholder !== 'Промокод') {\n      target.style.border = '1px solid #b7b7b7';\n      target.setCustomValidity('');\n\n      if (!regExpText.test(target.value) || target.value.length < 2) {\n        target.setCustomValidity(\"Введите имя\");\n        target.value = '';\n        target.style.border = \"3px solid red\";\n      }\n    } else {\n      target.style.border = '1px solid #b7b7b7';\n    }\n  });\n};\n\n/* harmony default export */ const modules_isValid = (isValid);\n;// CONCATENATED MODULE: ./src/modules/sendForm.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || sendForm_unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction sendForm_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return sendForm_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return sendForm_arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return sendForm_arrayLikeToArray(arr); }\n\nfunction sendForm_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar sendForm = function sendForm(idform) {\n  var errorMessage = 'Что-то пошло не так...',\n      loadMessage = 'Загрузка...',\n      successMessage = 'Спасибо! Мы скоро свяжемся с вами!',\n      policyMessage = 'Согласитесь на обработку персональных данных',\n      form = document.getElementById(idform),\n      thanksPopup = document.getElementById('thanks'),\n      policyCheckbox = form.querySelector('input[type=\"checkbox\"]'),\n      inputName = form.querySelector('input[type=\"text\"]'),\n      inputPhone = form.querySelector('input[type=\"tel\"]'),\n      radioBtn = _toConsumableArray(form.querySelectorAll('#footer_form input[type=radio]'));\n\n  var statusMessage = document.createElement('div');\n  statusMessage.style.cssText = 'font-size: 16px';\n  statusMessage.style.color = 'red';\n  statusMessage.style.margin = '5px 0 0 0';\n\n  var deleteMessage = function deleteMessage() {\n    setTimeout(function () {\n      statusMessage.textContent = '';\n    }, 5000);\n  };\n\n  if (policyCheckbox) {\n    policyCheckbox.removeAttribute('required');\n    inputName.removeAttribute('required');\n    inputPhone.removeAttribute('required');\n  }\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    if (inputName && (inputPhone.value == '' || inputName.value == '')) {\n      form.appendChild(statusMessage);\n      statusMessage.textContent = 'Необходимо заполнить все поля!';\n      deleteMessage();\n      return;\n    }\n\n    if (policyCheckbox && !policyCheckbox.checked) {\n      form.appendChild(statusMessage);\n      statusMessage.textContent = policyMessage;\n      deleteMessage();\n    } else {\n      setData(event, form);\n      setTimeout(function () {\n        thanksPopup.style.display = 'none';\n      }, 5000);\n      clearInput(form);\n    }\n  });\n\n  var clearInput = function clearInput() {\n    var inputs = [].concat(_toConsumableArray(form.querySelectorAll('input[type=\"text\"]')), _toConsumableArray(form.querySelectorAll('input[type=\"tel\"]')));\n    inputs.forEach(function (key) {\n      key.value = '';\n    });\n\n    if (policyCheckbox) {\n      policyCheckbox.checked = false;\n    }\n\n    statusMessage.textContent = '';\n  };\n\n  thanksPopup.addEventListener('click', function (event) {\n    if (event.target.matches('.overlay') || event.target.matches('[class *= close]')) {\n      thanksPopup.style.display = 'none';\n    }\n  });\n\n  var thanks = function thanks(message) {\n    thanksPopup.querySelector('p').textContent = message;\n    thanksPopup.style.display = 'block';\n  };\n\n  form.addEventListener('change', function () {\n    if (radioBtn[0] || radioBtn[1]) {\n      if (radioBtn[0].checked) {\n        radioBtn[1].checked = false;\n      } else {\n        radioBtn[0].checked = false;\n        radioBtn[1].checked = true;\n      }\n    }\n  });\n\n  var setData = function setData(event, form) {\n    event.preventDefault();\n    form.appendChild(statusMessage);\n    statusMessage.textContent = loadMessage;\n    var formData = new FormData(form);\n    var body = {};\n    formData.forEach(function (val, key) {\n      body[key] = val;\n    });\n\n    var postData = function postData(body) {\n      return fetch('./server.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n    };\n\n    postData(body).then(function (response) {\n      if (response.status !== 200) {\n        throw new Error('status network not 200');\n      }\n\n      thanks(successMessage);\n    })[\"catch\"](function (error) {\n      thanks(errorMessage);\n      console.log(error);\n    });\n  };\n};\n\n/* harmony default export */ const modules_sendForm = (sendForm);\n;// CONCATENATED MODULE: ./src/modules/calculator.js\nvar calculator = function calculator() {\n  var form = document.getElementById('card_order'),\n      priceTotal = document.querySelector('#price-total'),\n      promoInput = document.querySelector('input[placeholder = \"Промокод\"]'),\n      mozaika = document.querySelector('#card_leto_mozaika'),\n      schelkovo = document.querySelector('#card_leto_schelkovo'),\n      prices = {\n    mozaika: {\n      1: 1999,\n      6: 9900,\n      9: 13900,\n      12: 19900\n    },\n    schelkovo: {\n      1: 2999,\n      6: 14990,\n      9: 21990,\n      12: 24990\n    }\n  };\n  var amount = 1; // change price\n\n  form.addEventListener('change', function (event) {\n    var checked = function checked() {\n      if (schelkovo.checked) {\n        priceTotal.innerHTML = prices.schelkovo[amount];\n      } else if (mozaika.checked) {\n        priceTotal.innerHTML = prices.mozaika[amount];\n      }\n    };\n\n    var checkPromo = function checkPromo(promo) {\n      if (promoInput && promo.trim() === 'ТЕЛО2020') {\n        priceTotal.innerHTML = priceTotal.textContent - Math.floor(priceTotal.textContent * (30 / 100));\n      }\n    };\n\n    if (!event.target.closest('.time')) {\n      checked();\n\n      if (event.target.matches('input[placeholder = \"Промокод\"]')) {\n        checkPromo(event.target.value);\n      }\n    } else {\n      if (mozaika && mozaika.checked) {\n        amount = event.target.value;\n        priceTotal.innerHTML = prices.mozaika[event.target.value];\n      }\n\n      if (schelkovo && schelkovo.checked) {\n        amount = event.target.value;\n        priceTotal.innerHTML = prices.schelkovo[event.target.value];\n      }\n    }\n  });\n};\n\n/* harmony default export */ const modules_calculator = (calculator);\n;// CONCATENATED MODULE: ./src/modules/scroll.js\nvar scroll_scroll = function scroll() {\n  var goToTopBtn = document.querySelector('#totop');\n  goToTopBtn.style.display = 'none';\n  window.addEventListener('scroll', function (e) {\n    e.preventDefault();\n\n    if (window.pageYOffset > 680) {\n      goToTopBtn.style.display = 'block';\n    } else {\n      goToTopBtn.style.display = 'none';\n    }\n  });\n  goToTopBtn.addEventListener('click', function () {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  });\n};\n\n/* harmony default export */ const modules_scroll = (scroll_scroll);\n;// CONCATENATED MODULE: ./src/modules/hamburgerMenu.js\nvar hamburgerMenu = function hamburgerMenu() {\n  var navigationMenu = document.querySelector('.top-menu'),\n      popupMenu = document.querySelector('.popup-menu');\n  ['scroll', 'resize'].forEach(function (evt) {\n    return window.addEventListener(evt, function () {\n      if (window.pageYOffset > 130 && window.innerWidth < 768) {\n        navigationMenu.style.position = 'fixed';\n      } else {\n        navigationMenu.style.position = '';\n      }\n    }, false);\n  });\n  document.addEventListener('click', function (event) {\n    var target = event.target;\n\n    if (target.closest('.menu-button')) {\n      popupMenu.style.display = 'flex';\n    }\n\n    if (target.closest('.close-menu-btn') || target.closest('.scroll')) {\n      popupMenu.style.display = 'none';\n    }\n  });\n};\n\n/* harmony default export */ const modules_hamburgerMenu = (hamburgerMenu);\n;// CONCATENATED MODULE: ./src/modules/slider.js\nvar slider = function slider() {\n  var gallerySlider = document.querySelector('.gallery-slider'),\n      slide = gallerySlider.querySelectorAll(\".slide\"),\n      singleDot = document.querySelectorAll(\".dot\"),\n      dots = document.querySelectorAll(\".slider-dots > li\");\n\n  for (var i = 1; i < slide.length; i++) {\n    slide[i].style.display = 'none';\n    slide[i].style.opacity = 0;\n  }\n\n  var currentSlide = 0,\n      interval;\n\n  var prevSlide = function prevSlide(index) {\n    slide[index].style.display = 'none';\n    slide[index].style.opacity = 0;\n    dots[index].classList.remove('slick-active');\n  };\n\n  var nextSlide = function nextSlide(index) {\n    slide[index].style.display = 'block';\n    slide[index].style.opacity = 1;\n    dots[index].classList.add('slick-active');\n  };\n\n  var autoPlaySlide = function autoPlaySlide() {\n    prevSlide(currentSlide);\n    currentSlide++;\n\n    if (currentSlide >= slide.length) {\n      currentSlide = 0;\n    }\n\n    nextSlide(currentSlide);\n  };\n\n  var startSlide = function startSlide() {\n    var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;\n    interval = setInterval(autoPlaySlide, time);\n  };\n\n  var stopSlide = function stopSlide() {\n    clearInterval(interval);\n  };\n\n  gallerySlider.addEventListener('click', function (event) {\n    event.preventDefault();\n    var target = event.target;\n\n    if (!target.matches('.slider-arrow, .dot')) {\n      return;\n    }\n\n    ;\n    prevSlide(currentSlide);\n\n    if (target.matches('.next')) {\n      currentSlide++;\n    } else if (target.matches('.prev')) {\n      currentSlide--;\n    } else if (target.matches('.dot')) {\n      singleDot.forEach(function (elem, index) {\n        if (elem === target) {\n          currentSlide = index;\n        }\n      });\n    }\n\n    if (currentSlide >= slide.length) {\n      currentSlide = 0;\n    }\n\n    if (currentSlide < 0) {\n      currentSlide = slide.length - 1;\n    }\n\n    nextSlide(currentSlide);\n  });\n  gallerySlider.addEventListener('mouseover', function (event) {\n    if (event.target.matches('.slider-arrow') || event.target.matches('.dot')) {\n      stopSlide();\n    }\n  });\n  gallerySlider.addEventListener('mouseout', function (event) {\n    if (event.target.matches('.slider-arrow') || event.target.matches('.dot')) {\n      startSlide();\n    }\n  });\n  startSlide();\n};\n\n/* harmony default export */ const modules_slider = (slider);\n;// CONCATENATED MODULE: ./src/modules/carousel.js\nfunction carousel_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = carousel_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction carousel_toConsumableArray(arr) { return carousel_arrayWithoutHoles(arr) || carousel_iterableToArray(arr) || carousel_unsupportedIterableToArray(arr) || carousel_nonIterableSpread(); }\n\nfunction carousel_nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction carousel_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return carousel_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return carousel_arrayLikeToArray(o, minLen); }\n\nfunction carousel_iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction carousel_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return carousel_arrayLikeToArray(arr); }\n\nfunction carousel_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar carousel = function carousel() {\n  var sliderCarousel = /*#__PURE__*/function () {\n    function sliderCarousel(_ref) {\n      var main = _ref.main,\n          wrap = _ref.wrap,\n          next = _ref.next,\n          prev = _ref.prev,\n          _ref$infinity = _ref.infinity,\n          infinity = _ref$infinity === void 0 ? false : _ref$infinity,\n          _ref$position = _ref.position,\n          position = _ref$position === void 0 ? 0 : _ref$position,\n          _ref$slidesToShow = _ref.slidesToShow,\n          slidesToShow = _ref$slidesToShow === void 0 ? 4 : _ref$slidesToShow,\n          _ref$responsive = _ref.responsive,\n          responsive = _ref$responsive === void 0 ? [] : _ref$responsive;\n\n      _classCallCheck(this, sliderCarousel);\n\n      if (!main || !wrap) {\n        console.warn('SliderCarousel: Необохдимо передать свойства \"main\" и \"wrap\"!');\n      }\n\n      this.main = document.querySelector(main);\n      this.wrap = document.querySelector(wrap);\n      this.slides = this.wrap.querySelectorAll('.slide');\n      this.next = document.querySelector(next);\n      this.prev = document.querySelector(prev);\n      this.slidesToShow = slidesToShow;\n      this.options = {\n        position: position,\n        infinity: infinity,\n        widthSlide: Math.floor(100 / this.slidesToShow),\n        maxPosition: this.slides.length - this.slidesToShow\n      };\n      this.responsive = responsive;\n    }\n\n    _createClass(sliderCarousel, [{\n      key: \"init\",\n      value: function init() {\n        this.addClass();\n        this.addStyle();\n\n        if (this.prev && this.next) {\n          this.controlSLider();\n        } else {\n          this.addArrow();\n          this.controlSLider();\n        }\n\n        if (this.responsive) {\n          this.responseInit();\n        }\n      }\n    }, {\n      key: \"responseInit\",\n      value: function responseInit() {\n        var _this = this;\n\n        var slidesToShowDefault = this.slidesToShow,\n            allResponse = this.responsive.map(function (item) {\n          return item.breakpoint;\n        }),\n            maxResponse = Math.max.apply(Math, carousel_toConsumableArray(allResponse));\n\n        var checkResponse = function checkResponse() {\n          var widthWindow = document.documentElement.clientWidth;\n\n          if (widthWindow < maxResponse) {\n            for (var i = 0; i < allResponse.length; i++) {\n              if (widthWindow < allResponse[i]) {\n                _this.slidesToShow = _this.responsive[i].slideToShow;\n                _this.options.widthSlide = Math.floor(100 / _this.slidesToShow);\n\n                _this.addStyle();\n              } else {\n                _this.slidesToShow = slidesToShowDefault;\n                _this.options.widthSlide = Math.floor(100 / _this.slidesToShow);\n\n                _this.addStyle();\n              }\n            }\n          }\n        };\n\n        checkResponse();\n        window.addEventListener('resize', checkResponse);\n      }\n    }, {\n      key: \"addClass\",\n      value: function addClass() {\n        this.main.classList.add('glo-slider');\n        this.wrap.classList.add('glo-slider__wrap');\n\n        var _iterator = carousel_createForOfIteratorHelper(this.slides),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n            item.classList.add('glo-slider__item');\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }, {\n      key: \"addStyle\",\n      value: function addStyle() {\n        var style = document.getElementById('slider-carousel-style');\n\n        if (!style) {\n          style = document.createElement('style');\n          style.id = 'slider-carousel-style';\n        }\n\n        style.textContent = \"\\n                .glo-slider {\\n                    position: relative !important;\\n                    overflow: hidden !important;\\n                }\\n                .glo-slider__wrap {\\n                    padding: 0px !important;\\n                    display: flex !important;\\n                    transition: transform 0.5s !important;\\n                    will-change: transform !important;\\n                }\\n                .glo-slider__item {\\n                    flex: 0 0 \".concat(this.options.widthSlide, \"% !important;\\n                    margin: 0 auto !important;\\n                }\\n            \");\n        document.head.append(style);\n      }\n    }, {\n      key: \"controlSLider\",\n      value: function controlSLider() {\n        this.prev.addEventListener('click', this.prevSlider.bind(this));\n        this.next.addEventListener('click', this.nextSlider.bind(this));\n      }\n    }, {\n      key: \"prevSlider\",\n      value: function prevSlider() {\n        if (this.options.infinity || this.options.position > 0) {\n          --this.options.position;\n\n          if (this.options.position < 0) {\n            this.options.position = this.options.maxPosition;\n          }\n\n          this.wrap.style.transform = \"translateX(-\".concat(this.options.position * this.options.widthSlide, \"%)\");\n        }\n      }\n    }, {\n      key: \"nextSlider\",\n      value: function nextSlider() {\n        if (this.options.infinity || this.options.position < this.options.maxPosition) {\n          ++this.options.position;\n\n          if (this.options.position > this.options.maxPosition) {\n            this.options.position = 0;\n          }\n\n          this.wrap.style.transform = \"translateX(-\".concat(this.options.position * this.options.widthSlide, \"%)\");\n        }\n      }\n    }]);\n\n    return sliderCarousel;\n  }();\n\n  var options = {\n    main: '#services>.wrapper',\n    wrap: '.services-slider',\n    prev: '.wrap-wrap .prev',\n    next: '.wrap-wrap .next',\n    slidesToShow: 4,\n    infinity: true,\n    responsive: [{\n      breakpoint: 1024,\n      slideToShow: 3\n    }, {\n      breakpoint: 768,\n      slideToShow: 2\n    }, {\n      breakpoint: 576,\n      slideToShow: 1\n    }]\n  };\n  var carousel = new sliderCarousel(options);\n  carousel.init();\n};\n\n/* harmony default export */ const modules_carousel = (carousel);\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nmodules_selectClub();\nmodules_mainSlider();\nmodules_maskPhone();\nmodules_isValid();\nmodules_sendForm('form1');\nmodules_sendForm('form2');\nmodules_sendForm('card_order');\nmodules_sendForm('banner-form');\nmodules_sendForm('footer_form');\nmodules_formPopups();\nmodules_calculator();\nmodules_scroll();\nmodules_hamburgerMenu();\nmodules_slider();\nmodules_carousel();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///43\n")})();